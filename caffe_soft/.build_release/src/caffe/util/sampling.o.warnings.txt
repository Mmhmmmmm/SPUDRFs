In file included from ./include/caffe/util/device_alternate.hpp:40:0,
                 from ./include/caffe/common.hpp:19,
                 from ./include/caffe/util/math_functions.hpp:9,
                 from src/caffe/util/sampling.cpp:3:
./include/caffe/util/cudnn.hpp: In function 'const char* cudnnGetErrorString(cudnnStatus_t)':
./include/caffe/util/cudnn.hpp:21:10: warning: enumeration value 'CUDNN_STATUS_RUNTIME_IN_PROGRESS' not handled in switch [-Wswitch]
   switch (status) {
          ^
./include/caffe/util/cudnn.hpp:21:10: warning: enumeration value 'CUDNN_STATUS_RUNTIME_FP_OVERFLOW' not handled in switch [-Wswitch]
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Matrix<float, -1, 1> >, Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Matrix<float, -1, 1>, const Eigen::Matrix<float, -1, 1> > >, Eigen::internal::assign_op<float, float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<float, -1, 1> >, Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Matrix<float, -1, 1>, const Eigen::Matrix<float, -1, 1> > >, Eigen::internal::assign_op<float, float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<float, -1, 1>; SrcXprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Matrix<float, -1, 1>, const Eigen::Matrix<float, -1, 1> >; Functor = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<float, -1, 1>; SrcXprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Matrix<float, -1, 1>, const Eigen::Matrix<float, -1, 1> >; Functor = Eigen::internal::assign_op<float, float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<float, -1, 1>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Matrix<float, -1, 1>, const Eigen::Matrix<float, -1, 1> >; Func = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Matrix<float, -1, 1>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Matrix<float, -1, 1>, const Eigen::Matrix<float, -1, 1> >; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<float, -1, 1>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Matrix<float, -1, 1>, const Eigen::Matrix<float, -1, 1> >]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Matrix<float, -1, 1>, const Eigen::Matrix<float, -1, 1> >; Derived = Eigen::Matrix<float, -1, 1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<float, float>, const Eigen::Matrix<float, -1, 1>, const Eigen::Matrix<float, -1, 1> >; _Scalar = float; int _Rows = -1; int _Cols = 1; int _Options = 0; int _MaxRows = -1; int _MaxCols = 1]'
src/caffe/util/sampling.cpp:106:11:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Matrix<float, 1, -1> >, Eigen::internal::evaluator<Eigen::Matrix<float, 1, -1> >, Eigen::internal::assign_op<float, float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<float, 1, -1> >, Eigen::internal::evaluator<Eigen::Matrix<float, 1, -1> >, Eigen::internal::assign_op<float, float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<float, 1, -1>; SrcXprType = Eigen::Matrix<float, 1, -1>; Functor = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<float, 1, -1>; SrcXprType = Eigen::Matrix<float, 1, -1>; Functor = Eigen::internal::assign_op<float, float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Matrix<float, 1, -1>; Func = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:797:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Derived = Eigen::Matrix<float, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:108:44:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Transpose<Eigen::Matrix<float, 1, -1> > >, Eigen::internal::evaluator<Eigen::Matrix<float, 1, 1, 0, 1, 1> >, Eigen::internal::assign_op<float, float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Transpose<Eigen::Matrix<float, 1, -1> > >, Eigen::internal::evaluator<Eigen::Matrix<float, 1, 1, 0, 1, 1> >, Eigen::internal::assign_op<float, float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Transpose<Eigen::Matrix<float, 1, -1> >; SrcXprType = Eigen::Matrix<float, 1, 1, 0, 1, 1>; Functor = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Transpose<Eigen::Matrix<float, 1, -1> >; SrcXprType = Eigen::Matrix<float, 1, 1, 0, 1, 1>; Functor = Eigen::internal::assign_op<float, float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Matrix<float, 1, 1, 0, 1, 1>; Func = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:797:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Matrix<float, 1, -1>, Eigen::Matrix<float, -1, 1>, 0>; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Matrix<float, 1, -1>, Eigen::Matrix<float, -1, 1>, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Matrix<float, 1, -1>, Eigen::Matrix<float, -1, 1>, 0>; Derived = Eigen::Matrix<float, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Matrix<float, 1, -1>, Eigen::Matrix<float, -1, 1>, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:109:11:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Matrix<double, -1, 1> >, Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >, Eigen::internal::assign_op<double, double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<double, -1, 1> >, Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> > >, Eigen::internal::assign_op<double, double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<double, -1, 1>; SrcXprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Functor = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<double, -1, 1>; SrcXprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Functor = Eigen::internal::assign_op<double, double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<double, -1, 1>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Matrix<double, -1, 1>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<double, -1, 1>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; Derived = Eigen::Matrix<double, -1, 1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::CwiseBinaryOp<Eigen::internal::scalar_difference_op<double, double>, const Eigen::Matrix<double, -1, 1>, const Eigen::Matrix<double, -1, 1> >; _Scalar = double; int _Rows = -1; int _Cols = 1; int _Options = 0; int _MaxRows = -1; int _MaxCols = 1]'
src/caffe/util/sampling.cpp:150:11:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Matrix<double, 1, -1> >, Eigen::internal::evaluator<Eigen::Matrix<double, 1, -1> >, Eigen::internal::assign_op<double, double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<double, 1, -1> >, Eigen::internal::evaluator<Eigen::Matrix<double, 1, -1> >, Eigen::internal::assign_op<double, double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<double, 1, -1>; SrcXprType = Eigen::Matrix<double, 1, -1>; Functor = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<double, 1, -1>; SrcXprType = Eigen::Matrix<double, 1, -1>; Functor = Eigen::internal::assign_op<double, double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Matrix<double, 1, -1>; Func = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:797:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Derived = Eigen::Matrix<double, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:152:44:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Transpose<Eigen::Matrix<double, 1, -1> > >, Eigen::internal::evaluator<Eigen::Matrix<double, 1, 1, 0, 1, 1> >, Eigen::internal::assign_op<double, double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Transpose<Eigen::Matrix<double, 1, -1> > >, Eigen::internal::evaluator<Eigen::Matrix<double, 1, 1, 0, 1, 1> >, Eigen::internal::assign_op<double, double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Transpose<Eigen::Matrix<double, 1, -1> >; SrcXprType = Eigen::Matrix<double, 1, 1, 0, 1, 1>; Functor = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Transpose<Eigen::Matrix<double, 1, -1> >; SrcXprType = Eigen::Matrix<double, 1, 1, 0, 1, 1>; Functor = Eigen::internal::assign_op<double, double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Matrix<double, 1, 1, 0, 1, 1>; Func = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:797:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Matrix<double, 1, -1>, Eigen::Matrix<double, -1, 1>, 0>; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Matrix<double, 1, -1>, Eigen::Matrix<double, -1, 1>, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Matrix<double, 1, -1>, Eigen::Matrix<double, -1, 1>, 0>; Derived = Eigen::Matrix<double, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Matrix<double, 1, -1>, Eigen::Matrix<double, -1, 1>, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:153:11:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Matrix<float, -1, -1> >, Eigen::internal::evaluator<Eigen::Matrix<float, -1, -1> >, Eigen::internal::assign_op<float, float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<float, -1, -1> >, Eigen::internal::evaluator<Eigen::Matrix<float, -1, -1> >, Eigen::internal::assign_op<float, float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<float, -1, -1>; SrcXprType = Eigen::Matrix<float, -1, -1>; Functor = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<float, -1, -1>; SrcXprType = Eigen::Matrix<float, -1, -1>; Functor = Eigen::internal::assign_op<float, float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<float, -1, -1>; Src = Eigen::Matrix<float, -1, -1>; Func = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/PlainObjectBase.h:728:41:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Matrix<float, -1, -1>; Derived = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/Core/Matrix.h:278:27:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>&&) [with _Scalar = float; int _Rows = -1; int _Cols = -1; int _Options = 0; int _MaxRows = -1; int _MaxCols = -1]'
./include/Eigen/src/LU/PartialPivLU.h:75:38:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<float, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = float]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::internal::traits<T>::Scalar = float]'
src/caffe/util/sampling.cpp:113:79:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Matrix<double, -1, -1> >, Eigen::internal::evaluator<Eigen::Matrix<double, -1, -1> >, Eigen::internal::assign_op<double, double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<double, -1, -1> >, Eigen::internal::evaluator<Eigen::Matrix<double, -1, -1> >, Eigen::internal::assign_op<double, double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<double, -1, -1>; SrcXprType = Eigen::Matrix<double, -1, -1>; Functor = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<double, -1, -1>; SrcXprType = Eigen::Matrix<double, -1, -1>; Functor = Eigen::internal::assign_op<double, double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<double, -1, -1>; Src = Eigen::Matrix<double, -1, -1>; Func = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/PlainObjectBase.h:728:41:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set_noalias(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Matrix<double, -1, -1>; Derived = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/Core/Matrix.h:278:27:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>&&) [with _Scalar = double; int _Rows = -1; int _Cols = -1; int _Options = 0; int _MaxRows = -1; int _MaxCols = -1]'
./include/Eigen/src/LU/PartialPivLU.h:75:38:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<double, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = double]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::internal::traits<T>::Scalar = double]'
src/caffe/util/sampling.cpp:154:84:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<float>, 1>'
./include/Eigen/src/Core/Swap.h:19:7:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; Src = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; Func = Eigen::internal::swap_assign_op<float>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<float, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = float]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::internal::traits<T>::Scalar = float]'
src/caffe/util/sampling.cpp:113:79:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<double>, 1>'
./include/Eigen/src/Core/Swap.h:19:7:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; Src = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1, -1, false>; Func = Eigen::internal::swap_assign_op<double>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<double, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = double]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::internal::traits<T>::Scalar = double]'
src/caffe/util/sampling.cpp:154:84:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<float>, 1>'
./include/Eigen/src/Core/Swap.h:19:7:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; Src = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; Func = Eigen::internal::swap_assign_op<float>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<float, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = float]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::internal::traits<T>::Scalar = float]'
src/caffe/util/sampling.cpp:113:79:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, 1> > >, Eigen::internal::div_assign_op<float, float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, 1> > >, Eigen::internal::div_assign_op<float, float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, 1> >; Functor = Eigen::internal::div_assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, 1> >; Functor = Eigen::internal::div_assign_op<float, float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, 1> >; Func = Eigen::internal::div_assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, -1, 1> >; Func = Eigen::internal::div_assign_op<float, float>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/SelfCwiseBinaryOp.h:45:28:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<float, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = float]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::internal::traits<T>::Scalar = float]'
src/caffe/util/sampling.cpp:113:79:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<double>, 1>'
./include/Eigen/src/Core/Swap.h:19:7:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false> >, Eigen::internal::swap_assign_op<double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; Src = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, 1, -1, false>; Func = Eigen::internal::swap_assign_op<double>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   [ skipping 6 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<double, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = double]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::internal::traits<T>::Scalar = double]'
src/caffe/util/sampling.cpp:154:84:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >, Eigen::internal::div_assign_op<double, double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> > >, Eigen::internal::div_assign_op<double, double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >; Functor = Eigen::internal::div_assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >; Functor = Eigen::internal::div_assign_op<double, double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::div_assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false>; Src = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, -1, 1> >; Func = Eigen::internal::div_assign_op<double, double>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/SelfCwiseBinaryOp.h:45:28:   [ skipping 5 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<double, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = double]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::internal::traits<T>::Scalar = double]'
src/caffe/util/sampling.cpp:154:84:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:473:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of 'static void Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::run(Index, Index, const LhsMapper&, const RhsMapper&, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar*, Index, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar) [with Index = long int; LhsScalar = float; LhsMapper = Eigen::internal::const_blas_data_mapper<float, long int, 1>; bool ConjugateLhs = false; RhsScalar = float; RhsMapper = Eigen::internal::const_blas_data_mapper<float, long int, 0>; bool ConjugateRhs = false; int Version = 0; Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar = float]':
./include/Eigen/src/Core/GeneralProduct.h:334:132:   required from 'static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Matrix<float, -1, -1> >; Rhs = Eigen::Transpose<const Eigen::Transpose<Eigen::Matrix<float, -1, 1> > >; Dest = Eigen::Transpose<Eigen::Matrix<float, 1, -1> >; typename Dest::Scalar = float]'
./include/Eigen/src/Core/GeneralProduct.h:192:12:   required from 'static void Eigen::internal::gemv_dense_selector<1, StorageOrder, BlasCompatible>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<Eigen::Matrix<float, -1, 1> >; Rhs = Eigen::Matrix<float, -1, -1>; Dest = Eigen::Matrix<float, 1, -1>; int StorageOrder = 0; bool BlasCompatible = true; typename Dest::Scalar = float]'
./include/Eigen/src/Core/ProductEvaluators.h:383:34:   required from 'static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<float, 1, -1>; Lhs = Eigen::Transpose<Eigen::Matrix<float, -1, 1> >; Rhs = Eigen::Inverse<Eigen::Matrix<float, -1, -1> >; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = float]'
./include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from 'static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<float, 1, -1>; Lhs = Eigen::Transpose<Eigen::Matrix<float, -1, 1> >; Rhs = Eigen::Inverse<Eigen::Matrix<float, -1, -1> >; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = float]'
./include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from 'static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<float, 1, -1>; Lhs = Eigen::Transpose<Eigen::Matrix<float, -1, 1> >; Rhs = Eigen::Inverse<Eigen::Matrix<float, -1, -1> >; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, Eigen::DenseShape, Eigen::DenseShape, 7>]'
./include/Eigen/src/Core/ProductEvaluators.h:148:43:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/Core/Matrix.h:296:31:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
./include/Eigen/src/Core/AssignEvaluator.h:796:41:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Derived = Eigen::Matrix<float, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:108:44:   required from here
./include/Eigen/src/Core/products/GeneralMatrixVector.h:460:39: warning: enum constant in boolean context [-Wint-in-bool-context]
   const Index offset1 = (FirstAligned && alignmentStep==1)?3:1;
                         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
./include/Eigen/src/Core/products/GeneralMatrixVector.h:461:39: warning: enum constant in boolean context [-Wint-in-bool-context]
   const Index offset3 = (FirstAligned && alignmentStep==1)?1:3;
                         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
./include/Eigen/src/Core/products/GeneralMatrixVector.h: In instantiation of 'static void Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::run(Index, Index, const LhsMapper&, const RhsMapper&, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar*, Index, Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar) [with Index = long int; LhsScalar = double; LhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 1>; bool ConjugateLhs = false; RhsScalar = double; RhsMapper = Eigen::internal::const_blas_data_mapper<double, long int, 0>; bool ConjugateRhs = false; int Version = 0; Eigen::internal::general_matrix_vector_product<Index, LhsScalar, LhsMapper, 1, ConjugateLhs, RhsScalar, RhsMapper, ConjugateRhs, Version>::ResScalar = double]':
./include/Eigen/src/Core/GeneralProduct.h:334:132:   required from 'static void Eigen::internal::gemv_dense_selector<2, 1, true>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<const Eigen::Matrix<double, -1, -1> >; Rhs = Eigen::Transpose<const Eigen::Transpose<Eigen::Matrix<double, -1, 1> > >; Dest = Eigen::Transpose<Eigen::Matrix<double, 1, -1> >; typename Dest::Scalar = double]'
./include/Eigen/src/Core/GeneralProduct.h:192:12:   required from 'static void Eigen::internal::gemv_dense_selector<1, StorageOrder, BlasCompatible>::run(const Lhs&, const Rhs&, Dest&, const typename Dest::Scalar&) [with Lhs = Eigen::Transpose<Eigen::Matrix<double, -1, 1> >; Rhs = Eigen::Matrix<double, -1, -1>; Dest = Eigen::Matrix<double, 1, -1>; int StorageOrder = 0; bool BlasCompatible = true; typename Dest::Scalar = double]'
./include/Eigen/src/Core/ProductEvaluators.h:383:34:   required from 'static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::scaleAndAddTo(Dest&, const Lhs&, const Rhs&, const Scalar&) [with Dest = Eigen::Matrix<double, 1, -1>; Lhs = Eigen::Transpose<Eigen::Matrix<double, -1, 1> >; Rhs = Eigen::Inverse<Eigen::Matrix<double, -1, -1> >; Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 7>::Scalar = double]'
./include/Eigen/src/Core/ProductEvaluators.h:361:27:   required from 'static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::scaleAndAddTo(Dst&, const Lhs&, const Rhs&, const Scalar&) [with Dst = Eigen::Matrix<double, 1, -1>; Lhs = Eigen::Transpose<Eigen::Matrix<double, -1, 1> >; Rhs = Eigen::Inverse<Eigen::Matrix<double, -1, -1> >; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, Eigen::DenseShape, Eigen::DenseShape, 7>; Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::Scalar = double]'
./include/Eigen/src/Core/ProductEvaluators.h:349:33:   required from 'static void Eigen::internal::generic_product_impl_base<Lhs, Rhs, Derived>::evalTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Matrix<double, 1, -1>; Lhs = Eigen::Transpose<Eigen::Matrix<double, -1, 1> >; Rhs = Eigen::Inverse<Eigen::Matrix<double, -1, -1> >; Derived = Eigen::internal::generic_product_impl<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, Eigen::DenseShape, Eigen::DenseShape, 7>]'
./include/Eigen/src/Core/ProductEvaluators.h:148:43:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/Core/Matrix.h:296:31:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
./include/Eigen/src/Core/AssignEvaluator.h:796:41:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Derived = Eigen::Matrix<double, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:152:44:   required from here
./include/Eigen/src/Core/products/GeneralMatrixVector.h:460:39: warning: enum constant in boolean context [-Wint-in-bool-context]
   const Index offset1 = (FirstAligned && alignmentStep==1)?3:1;
                         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
./include/Eigen/src/Core/products/GeneralMatrixVector.h:461:39: warning: enum constant in boolean context [-Wint-in-bool-context]
   const Index offset3 = (FirstAligned && alignmentStep==1)?1:3;
                         ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1> >, Eigen::internal::sub_assign_op<float, float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1> >, Eigen::internal::sub_assign_op<float, float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; SrcXprType = Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1>; Functor = Eigen::internal::sub_assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; SrcXprType = Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1>; Functor = Eigen::internal::sub_assign_op<float, float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Src = Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1>; Func = Eigen::internal::sub_assign_op<float, float>]'
./include/Eigen/src/Core/ProductEvaluators.h:411:29:   required from 'static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 3>::subTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Lhs = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Rhs = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>]'
./include/Eigen/src/Core/products/GeneralMatrixMatrix.h:452:25:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<float, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = float]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::internal::traits<T>::Scalar = float]'
src/caffe/util/sampling.cpp:113:79:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1> >, Eigen::internal::sub_assign_op<double, double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::evaluator<Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1> >, Eigen::internal::sub_assign_op<double, double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; SrcXprType = Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1>; Functor = Eigen::internal::sub_assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; SrcXprType = Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1>; Functor = Eigen::internal::sub_assign_op<double, double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Src = Eigen::Product<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, 1>; Func = Eigen::internal::sub_assign_op<double, double>]'
./include/Eigen/src/Core/ProductEvaluators.h:411:29:   required from 'static void Eigen::internal::generic_product_impl<Lhs, Rhs, Eigen::DenseShape, Eigen::DenseShape, 3>::subTo(Dst&, const Lhs&, const Rhs&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Lhs = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Rhs = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>]'
./include/Eigen/src/Core/products/GeneralMatrixMatrix.h:452:25:   [ skipping 7 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<double, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = double]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::internal::traits<T>::Scalar = double]'
src/caffe/util/sampling.cpp:154:84:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Matrix<float, 1, -1> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, 1, -1> > >, Eigen::internal::assign_op<float, float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<float, 1, -1> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, 1, -1> > >, Eigen::internal::assign_op<float, float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<float, 1, -1>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, 1, -1> >; Functor = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<float, 1, -1>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, 1, -1> >; Functor = Eigen::internal::assign_op<float, float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, 1, -1> >; Func = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, Eigen::Matrix<float, 1, -1> >; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/Core/Matrix.h:296:31:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
./include/Eigen/src/Core/AssignEvaluator.h:796:41:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Derived = Eigen::Matrix<float, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:108:44:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Matrix<double, 1, -1> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >, Eigen::internal::assign_op<double, double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<double, 1, -1> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> > >, Eigen::internal::assign_op<double, double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<double, 1, -1>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >; Functor = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<double, 1, -1>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >; Functor = Eigen::internal::assign_op<double, double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >; Func = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, Eigen::Matrix<double, 1, -1> >; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   [ skipping 10 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/Core/Matrix.h:296:31:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
./include/Eigen/src/Core/AssignEvaluator.h:796:41:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Derived = Eigen::Matrix<double, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:152:44:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Map<Eigen::Matrix<float, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<float, -1, 1> > > >, Eigen::internal::assign_op<float, float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Map<Eigen::Matrix<float, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<float, -1, 1> > > >, Eigen::internal::assign_op<float, float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Map<Eigen::Matrix<float, -1, 1>, 0, Eigen::Stride<0, 0> >; SrcXprType = Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<float, -1, 1> > >; Functor = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Map<Eigen::Matrix<float, -1, 1>, 0, Eigen::Stride<0, 0> >; SrcXprType = Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<float, -1, 1> > >; Functor = Eigen::internal::assign_op<float, float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Map<Eigen::Matrix<float, -1, 1>, 0, Eigen::Stride<0, 0> >; Src = Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<float, -1, 1> > >; Func = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Map<Eigen::Matrix<float, -1, 1>, 0, Eigen::Stride<0, 0> >; Src = Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<float, -1, 1> > >; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/Core/Matrix.h:296:31:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
./include/Eigen/src/Core/AssignEvaluator.h:796:41:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Derived = Eigen::Matrix<float, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:108:44:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true> >, Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, const Eigen::Matrix<float, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> > >, Eigen::internal::sub_assign_op<float, float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true> >, Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, const Eigen::Matrix<float, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> > >, Eigen::internal::sub_assign_op<float, float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true>; SrcXprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, const Eigen::Matrix<float, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >; Functor = Eigen::internal::sub_assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true>; SrcXprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, const Eigen::Matrix<float, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >; Functor = Eigen::internal::sub_assign_op<float, float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, const Eigen::Matrix<float, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >; Func = Eigen::internal::sub_assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<float, float>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<float>, const Eigen::Matrix<float, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >; Func = Eigen::internal::sub_assign_op<float, float>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/CwiseBinaryOp.h:164:18:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<float, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = float]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::internal::traits<T>::Scalar = float]'
src/caffe/util/sampling.cpp:113:79:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::assign_op<float, float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::assign_op<float, float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Functor = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Functor = Eigen::internal::assign_op<float, float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Src = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Func = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Src = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<float, -1, -1>; _MatrixType = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<float, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<float, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = float]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<float, -1, -1>; typename Eigen::internal::traits<T>::Scalar = float]'
src/caffe/util/sampling.cpp:113:79:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Map<Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, 1> > > >, Eigen::internal::assign_op<double, double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Map<Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> > >, Eigen::internal::evaluator<Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, 1> > > >, Eigen::internal::assign_op<double, double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Map<Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; SrcXprType = Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, 1> > >; Functor = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Map<Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; SrcXprType = Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, 1> > >; Functor = Eigen::internal::assign_op<double, double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Map<Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Src = Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, 1> > >; Func = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Map<Eigen::Matrix<double, -1, 1>, 0, Eigen::Stride<0, 0> >; Src = Eigen::Transpose<const Eigen::Transpose<const Eigen::Matrix<double, -1, 1> > >; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/Core/Matrix.h:296:31:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
./include/Eigen/src/Core/AssignEvaluator.h:796:41:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Derived = Eigen::Matrix<double, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:152:44:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true> >, Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> > >, Eigen::internal::sub_assign_op<double, double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true> >, Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> > >, Eigen::internal::sub_assign_op<double, double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true>; SrcXprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >; Functor = Eigen::internal::sub_assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true>; SrcXprType = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >; Functor = Eigen::internal::sub_assign_op<double, double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >; Func = Eigen::internal::sub_assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>, -1, 1, true>; Src = Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double, double>, const Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>, const Eigen::Matrix<double, -1, 1> >, const Eigen::Block<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, 1, true>, -1, 1, false> >; Func = Eigen::internal::sub_assign_op<double, double>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/CwiseBinaryOp.h:164:18:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<double, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = double]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::internal::traits<T>::Scalar = double]'
src/caffe/util/sampling.cpp:154:84:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::assign_op<double, double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false> >, Eigen::internal::assign_op<double, double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Functor = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; SrcXprType = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Functor = Eigen::internal::assign_op<double, double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Src = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Func = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Src = Eigen::Block<Eigen::Block<Eigen::Map<Eigen::Matrix<double, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, -1, false>, -1, -1, false>; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/LU/PartialPivLU.h:131:14:   required from 'Eigen::PartialPivLU<MatrixType>& Eigen::PartialPivLU<MatrixType>::compute(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:323:10:   required from 'Eigen::PartialPivLU<MatrixType>::PartialPivLU(const Eigen::EigenBase<OtherDerived>&) [with InputType = Eigen::Matrix<double, -1, -1>; _MatrixType = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/PartialPivLU.h:591:10:   required from 'const Eigen::PartialPivLU<typename Eigen::DenseBase<Derived>::PlainObject> Eigen::MatrixBase<Derived>::partialPivLu() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::DenseBase<Derived>::PlainObject = Eigen::Matrix<double, -1, -1>]'
./include/Eigen/src/LU/Determinant.h:41:29:   required from 'static typename Eigen::internal::traits<T>::Scalar Eigen::internal::determinant_impl<Derived, DeterminantType>::run(const Derived&) [with Derived = Eigen::Matrix<double, -1, -1>; int DeterminantType = -1; typename Eigen::internal::traits<T>::Scalar = double]'
./include/Eigen/src/LU/Determinant.h:96:86:   required from 'typename Eigen::internal::traits<T>::Scalar Eigen::MatrixBase<Derived>::determinant() const [with Derived = Eigen::Matrix<double, -1, -1>; typename Eigen::internal::traits<T>::Scalar = double]'
src/caffe/util/sampling.cpp:154:84:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false> >, Eigen::internal::swap_assign_op<float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false> >, Eigen::internal::swap_assign_op<float>, 1>'
./include/Eigen/src/Core/Swap.h:19:7:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false> >, Eigen::internal::swap_assign_op<float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false>; Src = Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false>; Func = Eigen::internal::swap_assign_op<float>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   [ skipping 36 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/Core/Matrix.h:296:31:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
./include/Eigen/src/Core/AssignEvaluator.h:796:41:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Derived = Eigen::Matrix<float, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:108:44:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::internal::swap_assign_op<double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::internal::swap_assign_op<double>, 1>'
./include/Eigen/src/Core/Swap.h:19:7:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::internal::swap_assign_op<double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; SrcXprType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Functor = Eigen::internal::swap_assign_op<double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Src = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Func = Eigen::internal::swap_assign_op<double>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   [ skipping 36 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/Core/Matrix.h:296:31:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
./include/Eigen/src/Core/AssignEvaluator.h:796:41:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Derived = Eigen::Matrix<double, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:152:44:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<float>, Eigen::Matrix<float, -1, -1> >, 1, -1, false> >, Eigen::internal::assign_op<float, float> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<float>, Eigen::Matrix<float, -1, -1> >, 1, -1, false> >, Eigen::internal::assign_op<float, float>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false>; SrcXprType = Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<float>, Eigen::Matrix<float, -1, -1> >, 1, -1, false>; Functor = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false>; SrcXprType = Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<float>, Eigen::Matrix<float, -1, -1> >, 1, -1, false>; Functor = Eigen::internal::assign_op<float, float>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false>; Src = Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<float>, Eigen::Matrix<float, -1, -1> >, 1, -1, false>; Func = Eigen::internal::assign_op<float, float>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Block<Eigen::Matrix<float, -1, -1>, 1, -1, false>; Src = Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<float>, Eigen::Matrix<float, -1, -1> >, 1, -1, false>; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   [ skipping 36 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/Core/Matrix.h:296:31:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
./include/Eigen/src/Core/AssignEvaluator.h:796:41:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Derived = Eigen::Matrix<float, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:108:44:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>, Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, Eigen::internal::assign_op<double, double> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false> >, Eigen::internal::evaluator<Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>, Eigen::Matrix<double, -1, -1> >, 1, -1, false> >, Eigen::internal::assign_op<double, double>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; SrcXprType = Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>, Eigen::Matrix<double, -1, -1> >, 1, -1, false>; Functor = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; SrcXprType = Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>, Eigen::Matrix<double, -1, -1> >, 1, -1, false>; Functor = Eigen::internal::assign_op<double, double>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Src = Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>, Eigen::Matrix<double, -1, -1> >, 1, -1, false>; Func = Eigen::internal::assign_op<double, double>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Block<Eigen::Matrix<double, -1, -1>, 1, -1, false>; Src = Eigen::Block<const Eigen::CwiseNullaryOp<Eigen::internal::scalar_identity_op<double>, Eigen::Matrix<double, -1, -1> >, 1, -1, false>; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   [ skipping 36 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/Core/Matrix.h:296:31:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
./include/Eigen/src/Core/AssignEvaluator.h:796:41:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Func = Eigen::internal::assign_op<double, double>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<double, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; Derived = Eigen::Matrix<double, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<double, -1, 1> >, Eigen::Inverse<Eigen::Matrix<double, -1, -1> >, 0>; _Scalar = double; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:152:44:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h: In instantiation of 'struct Eigen::internal::copy_using_evaluator_traits<Eigen::internal::evaluator<Eigen::Matrix<bool, -1, 1, 0, -1, 1> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<bool>, Eigen::Matrix<bool, -1, 1, 0, -1, 1> > >, Eigen::internal::assign_op<bool, bool> >':
./include/Eigen/src/Core/AssignEvaluator.h:607:49:   required from 'class Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Matrix<bool, -1, 1, 0, -1, 1> >, Eigen::internal::evaluator<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<bool>, Eigen::Matrix<bool, -1, 1, 0, -1, 1> > >, Eigen::internal::assign_op<bool, bool>, 0>'
./include/Eigen/src/Core/AssignEvaluator.h:739:10:   required from 'void Eigen::internal::call_dense_assignment_loop(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<bool, -1, 1, 0, -1, 1>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<bool>, Eigen::Matrix<bool, -1, 1, 0, -1, 1> >; Functor = Eigen::internal::assign_op<bool, bool>]'
./include/Eigen/src/Core/AssignEvaluator.h:879:31:   required from 'static void Eigen::internal::Assignment<DstXprType, SrcXprType, Functor, Eigen::internal::Dense2Dense, Weak>::run(DstXprType&, const SrcXprType&, const Functor&) [with DstXprType = Eigen::Matrix<bool, -1, 1, 0, -1, 1>; SrcXprType = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<bool>, Eigen::Matrix<bool, -1, 1, 0, -1, 1> >; Functor = Eigen::internal::assign_op<bool, bool>; Weak = void]'
./include/Eigen/src/Core/AssignEvaluator.h:836:49:   required from 'void Eigen::internal::call_assignment_no_alias(Dst&, const Src&, const Func&) [with Dst = Eigen::Matrix<bool, -1, 1, 0, -1, 1>; Src = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<bool>, Eigen::Matrix<bool, -1, 1, 0, -1, 1> >; Func = Eigen::internal::assign_op<bool, bool>]'
./include/Eigen/src/Core/AssignEvaluator.h:804:27:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type) [with Dst = Eigen::Matrix<bool, -1, 1, 0, -1, 1>; Src = Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<bool>, Eigen::Matrix<bool, -1, 1, 0, -1, 1> >; Func = Eigen::internal::assign_op<bool, bool>; typename Eigen::internal::enable_if<(! Eigen::internal::evaluator_assume_aliasing<Src>::value), void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   [ skipping 39 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
./include/Eigen/src/Core/Matrix.h:296:31:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::Matrix(const T&) [with T = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
./include/Eigen/src/Core/AssignEvaluator.h:796:41:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&, const Func&, typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Func = Eigen::internal::assign_op<float, float>; typename Eigen::internal::enable_if<Eigen::internal::evaluator_assume_aliasing<Src>::value, void*>::type = void*]'
./include/Eigen/src/Core/AssignEvaluator.h:782:18:   required from 'void Eigen::internal::call_assignment(Dst&, const Src&) [with Dst = Eigen::Matrix<float, 1, -1>; Src = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>]'
./include/Eigen/src/Core/PlainObjectBase.h:710:32:   required from 'Derived& Eigen::PlainObjectBase<Derived>::_set(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; Derived = Eigen::Matrix<float, 1, -1>]'
./include/Eigen/src/Core/Matrix.h:225:24:   required from 'Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>& Eigen::Matrix<_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols>::operator=(const Eigen::DenseBase<OtherDerived>&) [with OtherDerived = Eigen::Product<Eigen::Transpose<Eigen::Matrix<float, -1, 1> >, Eigen::Inverse<Eigen::Matrix<float, -1, -1> >, 0>; _Scalar = float; int _Rows = 1; int _Cols = -1; int _Options = 1; int _MaxRows = 1; int _MaxCols = -1]'
src/caffe/util/sampling.cpp:108:44:   required from here
./include/Eigen/src/Core/AssignEvaluator.h:86:63: warning: enum constant in boolean context [-Wint-in-bool-context]
     MayLinearVectorize = bool(MightVectorize) && MayLinearize && DstHasDirectAccess
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
In file included from ./include/Eigen/Core:420:0,
                 from ./include/Eigen/Dense:1,
                 from ./include/Eigen/Eigen:1,
                 from src/caffe/util/sampling.cpp:4:
./include/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]
     MaySliceVectorize  = bool(MightVectorize) && bool(DstHasDirectAccess)
                                                  ^~~~~~~~~~~~~~~~~~~~~~~~
